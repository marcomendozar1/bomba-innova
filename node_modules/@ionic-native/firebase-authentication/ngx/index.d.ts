import { IonicNativePlugin } from '@ionic-native/core';
import { Observable } from 'rxjs';
/**
 * @name Firebase Authentication
 * @description
 * Cordova plugin for Firebase Authentication
 *
 * @usage
 * ```typescript
 * import { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';
 *
 *
 * constructor(private firebaseAuthentication: FirebaseAuthentication) { }
 *
 * ...
 *
 *
 * this.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')
 *   .then((res: any) => console.log(res))
 *   .catch((error: any) => console.error(error));
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class FirebaseAuthentication extends IonicNativePlugin {
    /**
     * Returns a JWT token used to identify the user to a Firebase service.
     * @param forceRefresh {boolean} Force Refresh
     * @return {Promise<any>} Returns the id token
     */
    getIdToken(forceRefresh: boolean): Promise<any>;
    /**
     * Tries to create a new user account with the given email address and password.
     * @param email Email
     * @param password Password
     */
    createUserWithEmailAndPassword(email: string, password: string): Promise<any>;
    /**
     * Initiates email verification for the current user.
     */
    sendEmailVerification(): Promise<any>;
    /**
     * Triggers the Firebase Authentication backend to send a password-reset email to the given email address,
     * which must correspond to an existing user of your app.
     * @param email Email
     */
    sendPasswordResetEmail(email: string): Promise<any>;
    /**
     * Asynchronously signs in using an email and password.
     * @param email Email
     * @param password Password
     */
    signInWithEmailAndPassword(email: string, password: string): Promise<any>;
    /**
     * Starts the phone number verification process for the given phone number.
     * NOTE: Android supports auto-verify and instant device verification.
     * Therefore in that cases it doesn't make sense to ask for sms code.
     * It's recommended to register onAuthStateChanged callback to be notified on auto sign-in.
     * timeout [milliseconds] is the maximum amount of time you are willing to wait for SMS auto-retrieval
     * to be completed by the library. Maximum allowed value is 2 minutes. Use 0 to disable SMS-auto-retrieval.
     * If you specify a positive value less than 30 seconds, library will default to 30 seconds.
     * @param phoneNumber Phone number
     * @param timeout {number} Timeout
     */
    verifyPhoneNumber(phoneNumber: string, timeout: number): Promise<any>;
    /**
     * Asynchronously signs in using verificationId and 6-digit SMS code.
     * @param verificationId Verification ID
     * @param smsCode SMS code
     */
    signInWithVerificationId(verificationId: string, smsCode: string): Promise<any>;
    /**
     * Create and use temporary anonymous account to authenticate with Firebase.
     */
    signInAnonymously(): Promise<any>;
    /**
     * Uses Google's idToken and accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS
     * @param idToken ID Token
     * @param accessToken Access Token
     */
    signInWithGoogle(idToken: string, accessToken: string): Promise<any>;
    /**
     * Uses Facebook's accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
     * @param accessToken Access Token
     */
    signInWithFacebook(accessToken: string): Promise<any>;
    /**
     * Uses Twitter's token and secret to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
     * @param token Token
     * @param secret Secret
     */
    signInWithTwitter(token: string, secret: string): Promise<any>;
    /**
     * Registers a block as an auth state did change listener. To be invoked when:
     *    - The block is registered as a listener,
     *    - A user with a different UID from the current user has signed in, or
     *    - The current user has signed out.
     */
    onAuthStateChanged(): Observable<any>;
    /**
     * Set's the current user language code. The string used to set this property must be a language code that follows BCP 47.
     * @param languageCode Language Code
     */
    setLanguageCode(languageCode: string): Promise<any>;
    /**
     * Sets languageCode to the app’s current language.
     */
    useAppLanguage(): Promise<any>;
    /**
     * Signs out the current user and clears it from the disk cache.
     */
    signOut(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FirebaseAuthentication, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FirebaseAuthentication>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbi8qKlxuICogQG5hbWUgRmlyZWJhc2UgQXV0aGVudGljYXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIEF1dGhlbnRpY2F0aW9uXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGaXJlYmFzZUF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9maXJlYmFzZS1hdXRoZW50aWNhdGlvbi9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlQXV0aGVudGljYXRpb246IEZpcmViYXNlQXV0aGVudGljYXRpb24pIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmZpcmViYXNlQXV0aGVudGljYXRpb24uY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKCd0ZXN0QGdtYWlsLmNvbScsICcxMjMnKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaXJlYmFzZUF1dGhlbnRpY2F0aW9uIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBKV1QgdG9rZW4gdXNlZCB0byBpZGVudGlmeSB0aGUgdXNlciB0byBhIEZpcmViYXNlIHNlcnZpY2UuXG4gICAgICogQHBhcmFtIGZvcmNlUmVmcmVzaCB7Ym9vbGVhbn0gRm9yY2UgUmVmcmVzaFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyB0aGUgaWQgdG9rZW5cbiAgICAgKi9cbiAgICBnZXRJZFRva2VuKGZvcmNlUmVmcmVzaDogYm9vbGVhbik6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBjcmVhdGUgYSBuZXcgdXNlciBhY2NvdW50IHdpdGggdGhlIGdpdmVuIGVtYWlsIGFkZHJlc3MgYW5kIHBhc3N3b3JkLlxuICAgICAqIEBwYXJhbSBlbWFpbCBFbWFpbFxuICAgICAqIEBwYXJhbSBwYXNzd29yZCBQYXNzd29yZFxuICAgICAqL1xuICAgIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEluaXRpYXRlcyBlbWFpbCB2ZXJpZmljYXRpb24gZm9yIHRoZSBjdXJyZW50IHVzZXIuXG4gICAgICovXG4gICAgc2VuZEVtYWlsVmVyaWZpY2F0aW9uKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyB0aGUgRmlyZWJhc2UgQXV0aGVudGljYXRpb24gYmFja2VuZCB0byBzZW5kIGEgcGFzc3dvcmQtcmVzZXQgZW1haWwgdG8gdGhlIGdpdmVuIGVtYWlsIGFkZHJlc3MsXG4gICAgICogd2hpY2ggbXVzdCBjb3JyZXNwb25kIHRvIGFuIGV4aXN0aW5nIHVzZXIgb2YgeW91ciBhcHAuXG4gICAgICogQHBhcmFtIGVtYWlsIEVtYWlsXG4gICAgICovXG4gICAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIGFuIGVtYWlsIGFuZCBwYXNzd29yZC5cbiAgICAgKiBAcGFyYW0gZW1haWwgRW1haWxcbiAgICAgKiBAcGFyYW0gcGFzc3dvcmQgUGFzc3dvcmRcbiAgICAgKi9cbiAgICBzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgcGhvbmUgbnVtYmVyIHZlcmlmaWNhdGlvbiBwcm9jZXNzIGZvciB0aGUgZ2l2ZW4gcGhvbmUgbnVtYmVyLlxuICAgICAqIE5PVEU6IEFuZHJvaWQgc3VwcG9ydHMgYXV0by12ZXJpZnkgYW5kIGluc3RhbnQgZGV2aWNlIHZlcmlmaWNhdGlvbi5cbiAgICAgKiBUaGVyZWZvcmUgaW4gdGhhdCBjYXNlcyBpdCBkb2Vzbid0IG1ha2Ugc2Vuc2UgdG8gYXNrIGZvciBzbXMgY29kZS5cbiAgICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHJlZ2lzdGVyIG9uQXV0aFN0YXRlQ2hhbmdlZCBjYWxsYmFjayB0byBiZSBub3RpZmllZCBvbiBhdXRvIHNpZ24taW4uXG4gICAgICogdGltZW91dCBbbWlsbGlzZWNvbmRzXSBpcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB5b3UgYXJlIHdpbGxpbmcgdG8gd2FpdCBmb3IgU01TIGF1dG8tcmV0cmlldmFsXG4gICAgICogdG8gYmUgY29tcGxldGVkIGJ5IHRoZSBsaWJyYXJ5LiBNYXhpbXVtIGFsbG93ZWQgdmFsdWUgaXMgMiBtaW51dGVzLiBVc2UgMCB0byBkaXNhYmxlIFNNUy1hdXRvLXJldHJpZXZhbC5cbiAgICAgKiBJZiB5b3Ugc3BlY2lmeSBhIHBvc2l0aXZlIHZhbHVlIGxlc3MgdGhhbiAzMCBzZWNvbmRzLCBsaWJyYXJ5IHdpbGwgZGVmYXVsdCB0byAzMCBzZWNvbmRzLlxuICAgICAqIEBwYXJhbSBwaG9uZU51bWJlciBQaG9uZSBudW1iZXJcbiAgICAgKiBAcGFyYW0gdGltZW91dCB7bnVtYmVyfSBUaW1lb3V0XG4gICAgICovXG4gICAgdmVyaWZ5UGhvbmVOdW1iZXIocGhvbmVOdW1iZXI6IHN0cmluZywgdGltZW91dDogbnVtYmVyKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHVzaW5nIHZlcmlmaWNhdGlvbklkIGFuZCA2LWRpZ2l0IFNNUyBjb2RlLlxuICAgICAqIEBwYXJhbSB2ZXJpZmljYXRpb25JZCBWZXJpZmljYXRpb24gSURcbiAgICAgKiBAcGFyYW0gc21zQ29kZSBTTVMgY29kZVxuICAgICAqL1xuICAgIHNpZ25JbldpdGhWZXJpZmljYXRpb25JZCh2ZXJpZmljYXRpb25JZDogc3RyaW5nLCBzbXNDb2RlOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCB1c2UgdGVtcG9yYXJ5IGFub255bW91cyBhY2NvdW50IHRvIGF1dGhlbnRpY2F0ZSB3aXRoIEZpcmViYXNlLlxuICAgICAqL1xuICAgIHNpZ25JbkFub255bW91c2x5KCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBVc2VzIEdvb2dsZSdzIGlkVG9rZW4gYW5kIGFjY2Vzc1Rva2VuIHRvIHNpZ24taW4gaW50byBmaXJlYmFzZSBhY2NvdW50LiBJbiBvcmRlciB0byByZXRyaWV2ZSB0aG9zZSB0b2tlbnMgZm9sbG93IGluc3RydWN0aW9ucyBmb3IgQW5kcm9pZCBhbmQgaU9TXG4gICAgICogQHBhcmFtIGlkVG9rZW4gSUQgVG9rZW5cbiAgICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4gQWNjZXNzIFRva2VuXG4gICAgICovXG4gICAgc2lnbkluV2l0aEdvb2dsZShpZFRva2VuOiBzdHJpbmcsIGFjY2Vzc1Rva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogVXNlcyBGYWNlYm9vaydzIGFjY2Vzc1Rva2VuIHRvIHNpZ24taW4gaW50byBmaXJlYmFzZSBhY2NvdW50LiBJbiBvcmRlciB0byByZXRyaWV2ZSB0aG9zZSB0b2tlbnMgZm9sbG93IGluc3RydWN0aW9ucyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICAgICAqIEBwYXJhbSBhY2Nlc3NUb2tlbiBBY2Nlc3MgVG9rZW5cbiAgICAgKi9cbiAgICBzaWduSW5XaXRoRmFjZWJvb2soYWNjZXNzVG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBVc2VzIFR3aXR0ZXIncyB0b2tlbiBhbmQgc2VjcmV0IHRvIHNpZ24taW4gaW50byBmaXJlYmFzZSBhY2NvdW50LiBJbiBvcmRlciB0byByZXRyaWV2ZSB0aG9zZSB0b2tlbnMgZm9sbG93IGluc3RydWN0aW9ucyBmb3IgQW5kcm9pZCBhbmQgaU9TLlxuICAgICAqIEBwYXJhbSB0b2tlbiBUb2tlblxuICAgICAqIEBwYXJhbSBzZWNyZXQgU2VjcmV0XG4gICAgICovXG4gICAgc2lnbkluV2l0aFR3aXR0ZXIodG9rZW46IHN0cmluZywgc2VjcmV0OiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgYmxvY2sgYXMgYW4gYXV0aCBzdGF0ZSBkaWQgY2hhbmdlIGxpc3RlbmVyLiBUbyBiZSBpbnZva2VkIHdoZW46XG4gICAgICogICAgLSBUaGUgYmxvY2sgaXMgcmVnaXN0ZXJlZCBhcyBhIGxpc3RlbmVyLFxuICAgICAqICAgIC0gQSB1c2VyIHdpdGggYSBkaWZmZXJlbnQgVUlEIGZyb20gdGhlIGN1cnJlbnQgdXNlciBoYXMgc2lnbmVkIGluLCBvclxuICAgICAqICAgIC0gVGhlIGN1cnJlbnQgdXNlciBoYXMgc2lnbmVkIG91dC5cbiAgICAgKi9cbiAgICBvbkF1dGhTdGF0ZUNoYW5nZWQoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldCdzIHRoZSBjdXJyZW50IHVzZXIgbGFuZ3VhZ2UgY29kZS4gVGhlIHN0cmluZyB1c2VkIHRvIHNldCB0aGlzIHByb3BlcnR5IG11c3QgYmUgYSBsYW5ndWFnZSBjb2RlIHRoYXQgZm9sbG93cyBCQ1AgNDcuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlQ29kZSBMYW5ndWFnZSBDb2RlXG4gICAgICovXG4gICAgc2V0TGFuZ3VhZ2VDb2RlKGxhbmd1YWdlQ29kZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNldHMgbGFuZ3VhZ2VDb2RlIHRvIHRoZSBhcHDigJlzIGN1cnJlbnQgbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgdXNlQXBwTGFuZ3VhZ2UoKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNpZ25zIG91dCB0aGUgY3VycmVudCB1c2VyIGFuZCBjbGVhcnMgaXQgZnJvbSB0aGUgZGlzayBjYWNoZS5cbiAgICAgKi9cbiAgICBzaWduT3V0KCk6IFByb21pc2U8YW55Pjtcbn1cbiJdfQ==